{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"OpenLab4_LinearRegression","provenance":[],"collapsed_sections":[],"authorship_tag":"ABX9TyMCTLYQfpTSKFwXX+xubPzW"},"kernelspec":{"name":"python3","display_name":"Python 3"}},"cells":[{"cell_type":"code","metadata":{"id":"yhzmlZmaNcr2","colab_type":"code","colab":{}},"source":["import numpy as np\n","import matplotlib.pyplot as plt\n","import random"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"UDCE9wUMQyy9","colab_type":"code","colab":{}},"source":["X = np.array([0.,         0.26, 0.52, 0.78, 1.05, 1.31,\n"," 1.57, 1.84, 2.10, 2.36, 2.63, 2.89,\n"," 3.15, 3.42, 3.68, 3.94, 4.21, 4.47,\n"," 4.73, 5.       ])\n","Y = np.array([ 4.55, 23.68, 12.88, 15.2,  17.15, 16.02, 8.66, 23.99, 19.11, 14.28, 40.9,  22.13,\n"," 34.3, 28.51, 48.99, 34.36, 60.34, 53.91, 44.36, 45.61])"],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"RE8OSCaf83Yq","colab_type":"text"},"source":["# Делим данные на обучающую и валидационную выборку"]},{"cell_type":"code","metadata":{"id":"JFlAZqiYwfni","colab_type":"code","outputId":"93424432-4062-420d-b162-fad2a9ef7a90","executionInfo":{"status":"ok","timestamp":1589053045777,"user_tz":-180,"elapsed":561,"user":{"displayName":"Григорий Рашков","photoUrl":"","userId":"08952495357133012535"}},"colab":{"base_uri":"https://localhost:8080/","height":34}},"source":["s_train = random.sample(list(range(20)), k=10)\n","s_train.sort()\n","print(s_train)"],"execution_count":0,"outputs":[{"output_type":"stream","text":["[0, 2, 3, 4, 7, 9, 12, 15, 17, 19]\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"kKQM4sePxyOp","colab_type":"code","outputId":"f3e9510b-96d0-4086-c45a-596e85f46035","executionInfo":{"status":"ok","timestamp":1589053047702,"user_tz":-180,"elapsed":1006,"user":{"displayName":"Григорий Рашков","photoUrl":"","userId":"08952495357133012535"}},"colab":{"base_uri":"https://localhost:8080/","height":34}},"source":["s_valid = [s for s in range(20) if s not in s_train]\n","print(s_valid)"],"execution_count":0,"outputs":[{"output_type":"stream","text":["[1, 5, 6, 8, 10, 11, 13, 14, 16, 18]\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"3iiD7GZwxBDC","colab_type":"code","outputId":"e5bede25-5310-418f-e786-80177beea372","executionInfo":{"status":"ok","timestamp":1589053049002,"user_tz":-180,"elapsed":748,"user":{"displayName":"Григорий Рашков","photoUrl":"","userId":"08952495357133012535"}},"colab":{"base_uri":"https://localhost:8080/","height":34}},"source":["X_train = X[s_train]\n","Y_train = Y[s_train]\n","print(X_train)"],"execution_count":0,"outputs":[{"output_type":"stream","text":["[0.   0.52 0.78 1.05 1.84 2.36 3.15 3.94 4.47 5.  ]\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"FDdnQChHyHcA","colab_type":"code","colab":{}},"source":["X_valid = X[s_valid]\n","Y_valid = Y[s_valid]"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"EmUaLJwyRnSW","colab_type":"code","outputId":"48e9cc49-2f84-46e8-fa52-1c409cb5248b","executionInfo":{"status":"ok","timestamp":1589053053782,"user_tz":-180,"elapsed":943,"user":{"displayName":"Григорий Рашков","photoUrl":"","userId":"08952495357133012535"}},"colab":{"base_uri":"https://localhost:8080/","height":281}},"source":["plt.scatter(X_train,Y_train)"],"execution_count":0,"outputs":[{"output_type":"execute_result","data":{"text/plain":["<matplotlib.collections.PathCollection at 0x7eff82402470>"]},"metadata":{"tags":[]},"execution_count":7},{"output_type":"display_data","data":{"image/png":"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\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}}]},{"cell_type":"markdown","metadata":{"id":"obNY1MoG9EQO","colab_type":"text"},"source":["# Создаем модель"]},{"cell_type":"code","metadata":{"id":"Uwl2-Uj7Rsqi","colab_type":"code","colab":{}},"source":["class Linear:\n","    def __init__(self,weights, bias):\n","        self.parameters = {'weights':weights, 'bias':bias}\n","\n","    def forward(self,x):\n","        return self.parameters['weights']*x+self.parameters['bias']\n","\n","    def __call__(self,x):\n","        return self.forward(x)\n"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"QVH0uNj0SVfu","colab_type":"code","colab":{}},"source":["model = Linear(weights=2, bias=0)"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"_BxvDauqTFqR","colab_type":"code","outputId":"7e9de796-d695-4f85-8054-99da498450aa","executionInfo":{"status":"ok","timestamp":1589053108269,"user_tz":-180,"elapsed":974,"user":{"displayName":"Григорий Рашков","photoUrl":"","userId":"08952495357133012535"}},"colab":{"base_uri":"https://localhost:8080/","height":34}},"source":["pred = []\n","for x in X_valid.tolist():\n","    pred.append(model(x))\n","print(pred)"],"execution_count":0,"outputs":[{"output_type":"stream","text":["[0.52, 2.62, 3.14, 4.2, 5.26, 5.78, 6.84, 7.36, 8.42, 9.46]\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"nvTjcsBHTZ_t","colab_type":"code","outputId":"c70d338c-e050-469f-e874-e526ad38c8bf","executionInfo":{"status":"ok","timestamp":1589053111381,"user_tz":-180,"elapsed":908,"user":{"displayName":"Григорий Рашков","photoUrl":"","userId":"08952495357133012535"}},"colab":{"base_uri":"https://localhost:8080/","height":281}},"source":["plt.plot(X_valid,pred)\n","plt.scatter(X_valid,Y_valid)"],"execution_count":0,"outputs":[{"output_type":"execute_result","data":{"text/plain":["<matplotlib.collections.PathCollection at 0x7eff7fb778d0>"]},"metadata":{"tags":[]},"execution_count":14},{"output_type":"display_data","data":{"image/png":"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\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}}]},{"cell_type":"code","metadata":{"id":"WYmfQb9wlCFl","colab_type":"code","outputId":"63bd3369-8f21-44db-9553-1aaaf14f86e7","executionInfo":{"status":"ok","timestamp":1589053123145,"user_tz":-180,"elapsed":5134,"user":{"displayName":"Григорий Рашков","photoUrl":"","userId":"08952495357133012535"}},"colab":{"base_uri":"https://localhost:8080/","height":34}},"source":["error = 0\n","for x,y in zip(X_valid,Y_valid):\n","    pred = model(x)\n","    error += (y-pred)**2\n","print(error/len(Y))"],"execution_count":0,"outputs":[{"output_type":"stream","text":["723.7745849999999\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"GqcXew0Z9JSB","colab_type":"text"},"source":["# Обучение модели"]},{"cell_type":"code","metadata":{"id":"VzdouoF0mBOQ","colab_type":"code","colab":{}},"source":["class Optimizer:\n","    def __init__(self, params, param_names, lr=0.01):\n","        self.params = params\n","        self.param_names = param_names\n","        self.lr = lr\n","\n","    def step(self,loss):\n","        for p_name in self.param_names:\n","            self.params[p_name] -= loss*self.lr"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"iDC0Q-HamrMA","colab_type":"code","colab":{}},"source":["optimizer = Optimizer(params = model.parameters, param_names=['weights'], lr=0.01)"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"v0hTBKuYm2xm","colab_type":"code","outputId":"108f7227-7934-454a-e233-d79931148475","executionInfo":{"status":"ok","timestamp":1589053151591,"user_tz":-180,"elapsed":1009,"user":{"displayName":"Григорий Рашков","photoUrl":"","userId":"08952495357133012535"}},"colab":{"base_uri":"https://localhost:8080/","height":358}},"source":["weights = []\n","steps = []\n","i=0\n","for epoch in range(2):\n","    for (x,y) in zip(X_train,Y_train):\n","        i +=1\n","        pred = model(x)\n","        loss = -2*x*(y - pred)\n","        optimizer.step(loss)\n","        weights.append(model.parameters['weights'])\n","        steps.append(i)\n","        print('loss: ', loss, 'weights', model.parameters['weights'])"],"execution_count":0,"outputs":[{"output_type":"stream","text":["loss:  -0.0 weights 2.0\n","loss:  -12.313600000000001 weights 2.123136\n","loss:  -21.1285681152 weights 2.334421681152\n","loss:  -30.86760019305984 weights 2.6430976830825985\n","loss:  -70.3862569683111 weights 3.3469602527657094\n","loss:  -30.119140352392208 weights 3.6481516562896315\n","loss:  -143.69243038093225 weights 5.085075960098954\n","loss:  -112.87942965161575 weights 6.213870256615111\n","loss:  -233.6379595791982 weights 8.550249852407093\n","loss:  -28.587507379645345 weights 8.836124926203548\n","loss:  -0.0 weights 8.836124926203548\n","loss:  -8.616623639909124 weights 8.922291162602638\n","loss:  -12.85535611334511 weights 9.05084472373609\n","loss:  -16.05788738416192 weights 9.211423597577708\n","loss:  -25.91080853608181 weights 9.470531682938526\n","loss:  38.092546522588826 weights 9.089606217712639\n","loss:  -35.70676460949266 weights 9.446673863807565\n","loss:  22.535972784406223 weights 9.221314135963503\n","loss:  -113.45508876145364 weights 10.35586502357804\n","loss:  61.69325117890203 weights 9.73893251178902\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"J7nXmYWrp-cE","colab_type":"code","outputId":"fd3d7fd6-09a5-4eea-e488-4ca05bae81bf","executionInfo":{"status":"ok","timestamp":1589053155193,"user_tz":-180,"elapsed":901,"user":{"displayName":"Григорий Рашков","photoUrl":"","userId":"08952495357133012535"}},"colab":{"base_uri":"https://localhost:8080/","height":281}},"source":["plt.plot(steps, weights)"],"execution_count":0,"outputs":[{"output_type":"execute_result","data":{"text/plain":["[<matplotlib.lines.Line2D at 0x7eff7f6062b0>]"]},"metadata":{"tags":[]},"execution_count":20},{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}}]},{"cell_type":"markdown","metadata":{"id":"maNSPPcP9OBf","colab_type":"text"},"source":["# Тестируем модель"]},{"cell_type":"code","metadata":{"id":"qm-fu2eqYLur","colab_type":"code","outputId":"c411b498-ec98-43fc-9905-a8d962e88552","executionInfo":{"status":"ok","timestamp":1589053164093,"user_tz":-180,"elapsed":950,"user":{"displayName":"Григорий Рашков","photoUrl":"","userId":"08952495357133012535"}},"colab":{"base_uri":"https://localhost:8080/","height":298}},"source":["pred = []\n","for i in range(len(X_valid)):\n","    pred.append(model(X_valid[i]))\n","print(pred)\n","plt.plot(X_valid,pred)\n","plt.scatter(X_valid,Y_valid)"],"execution_count":0,"outputs":[{"output_type":"stream","text":["[2.532122453065145, 12.758001590443618, 15.290124043508762, 20.451758274756944, 25.613392506005123, 28.14551495907027, 33.30714919031845, 35.8392716433836, 41.000905874631776, 46.06515078076207]\n"],"name":"stdout"},{"output_type":"execute_result","data":{"text/plain":["<matplotlib.collections.PathCollection at 0x7eff7f5bf320>"]},"metadata":{"tags":[]},"execution_count":22},{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}}]},{"cell_type":"code","metadata":{"id":"RbeoWPUWXIwT","colab_type":"code","outputId":"960bcd1e-3c66-4161-ac34-e851403ea2a8","executionInfo":{"status":"ok","timestamp":1589053166882,"user_tz":-180,"elapsed":847,"user":{"displayName":"Григорий Рашков","photoUrl":"","userId":"08952495357133012535"}},"colab":{"base_uri":"https://localhost:8080/","height":34}},"source":["error = 0\n","for i,(x,y) in enumerate(zip(X_valid,Y_valid)):\n","    error += (y-model(x))**2\n","print(error/len(Y))"],"execution_count":0,"outputs":[{"output_type":"stream","text":["67.31807024006116\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"2NPo4rbW8y3J","colab_type":"text"},"source":["# Домашнее задание"]},{"cell_type":"markdown","metadata":{"id":"98itySBd9Q4B","colab_type":"text"},"source":["**Задача 1**\n","Перепишите класс Linear так, чтобы функция __init__ принимала количество входов в слое (in_features), количество выходов в слое (out_features), и наличие-отсутствие смещения. При этом изначальная матрица весов и смещение должны задаваться в функции init_parameters случайными значениями"]},{"cell_type":"code","metadata":{"id":"gwNnLR-iBqzy","colab_type":"code","colab":{}},"source":["class Linear:\n","    def __init__(self,in_features, out_features, bias=False):\n","        self.init_parameters(in_features, out_features, bias)\n","\n","    def init_parameters(self, in_features, out_features, bias):\n","        weights = ...\n","        if bias:\n","            bias = ...\n","        else:\n","            bias = ...\n","        self.parameters = {'weights':weights, 'bias':bias}\n","\n","    def forward(self,x):\n","        return np.dot(self.parameters['weights'],x)+self.parameters['bias']\n","\n","    def __call__(self,x):\n","        return self.forward(x)"],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"hk0pQRlVCRmi","colab_type":"text"},"source":["**Задача 2**\n","Найдите производные функций f по w0 и w1:\n","\n","1.   f = w0\\*x0+w1\\*x1+b\n","2.   f = (t - x0\\*w0-x1\\*w1-b)**2\n","3.   f = exp(x0\\*w0+x1*w1+b)/C\n"]},{"cell_type":"markdown","metadata":{"id":"1nEYmq1TDLVf","colab_type":"text"},"source":["**Задача 3**\n","Дана зависимость Y от двух переменных, записанных в X. Решите задачу регрессии. Можно считать, что смещения нет."]},{"cell_type":"markdown","metadata":{"id":"Fz9ku5Pstbke","colab_type":"text"},"source":["О данных: точке с координатами [ 0.,    -10.], соответствует занчение 10.891, точке [  1.379,  -8.966], соответствует 15.577, точке [  2.758,  -7.932] соответствует значение 14.498 и т.д\n","\n"]},{"cell_type":"code","metadata":{"id":"wHEADrDrD0CB","colab_type":"code","colab":{}},"source":["X = [[ 0.,    -10.],\n"," [  1.379,  -8.966],\n"," [  2.758,  -7.932],\n"," [  4.137,  -6.897],\n"," [  5.517,  -5.863],\n"," [  6.896,  -4.828],\n"," [  8.275,  -3.794],\n"," [  9.655,  -2.759],\n"," [ 11.034,  -1.725],\n"," [ 12.413,  -0.69 ],\n"," [ 13.793,   0.344],\n"," [ 15.172,   1.379],\n"," [ 16.551,   2.413],\n"," [ 17.931,   3.448],\n"," [ 19.31,    4.482],\n"," [ 20.689,   5.517],\n"," [ 22.068,   6.551],\n"," [ 23.448,   7.586],\n"," [ 24.827,   8.62 ],\n"," [ 26.206,   9.655],\n"," [ 27.586,  10.689],\n"," [ 28.965,  11.724],\n"," [ 30.344,  12.758],\n"," [ 31.724,  13.793],\n"," [ 33.103,  14.827],\n"," [ 34.482,  15.862],\n"," [ 35.862,  16.896],\n"," [ 37.241,  17.931],\n"," [ 38.62,   18.965],\n"," [ 40.,     20.   ]]\n","\n","Y = [10.891, 15.577, 14.498, 22.596, 18.982, 14.607, 22.64,  25.482, 21.087, 25.225,\n"," 28.691, 26.957, 27.12,  33.739, 40.115, 35.667, 33.758, 38.125, 38.56,  32.888,\n"," 43.862, 44.949, 43.473, 47.243, 52.253, 48.46,  50.154, 52.555, 61.212, 55.007]"],"execution_count":0,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"YUMaHEBRe8oc","colab_type":"text"},"source":["**Задача 4** Найдите производные по w01 и w21 от функций:\n","\n","\n","*   f = w20\\*(w00\\*x0 + w01\\*x1)+w21\\*(w10\\*x0 + w11\\*x1)\n","*   f = sigmoid(w20\\*(w00\\*x0 + w01\\*x1)+w21\\*(w10\\*x0 + w11\\*x1)\n","\n"]}]}